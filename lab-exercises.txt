課題１： A* （基本的な探索アルゴリズムの実装、 高速なコードの実装）参考3.2章节
Russell &Norvigで紹介された8パズルを、Ａ＊アルゴリズムを用いて解くプログラムを実装する。
以下の３つの条件における性能（実行時間）を評価・比較する
a) ヒューリスティック関数を使わないＡ＊（h(s)=0 for all states)
b)  ゴールの位置にないタイルの数をヒューリスティックとする （Russell and Norvig p.106）
b)  マンハッタン距離をヒューリスティックとする （Russell and Norvig p.106）
評価実験は１００個以上のランダムに作成したパズル初期状態に対して行う。
但し、単純ランダムにタイルを割り当てて初期状態を作ると、解が存在しない初期状態が多い。
正しいパズルの初期状態の生成方法： まず、正しい状態（＝ゴール状態）から、一歩ランダムな方向にに空タイルを移動する。
このように空タイルをランダムな方向に移動する作業を繰り返すとパズルはどんどん崩れるが、必ず解（ゴールまでの経路）が存在する。
一般的には、ランダム移転数を増やすほど、「難しい」パズルが生成される。
一般的には、ランダム移転数を増やすほど、「難しい」パズルが生成される。
** C/C++で実装すればどんな問題でも1秒以内で解けるはず(信原君がRubyで実装したソルバは数秒以内で全ての問題が解けた）
課題１A: データ構造等の工夫で高速な１５パズルの実装を目指す
まず、１５パズルのソルバを実装する（８パズルのソルバを作成していれば簡単なはず）。
ヒューリスティックはマンハッタン距離を使う。
上記の８パズルのように１５パズルの問題をランダム生成すれば、かなり難しい問題が生成される。
一秒間に展開されるノード数を測る（ソルバを実行して、終了時に生成されたノード数 / 実行時間）。
目標： 一秒間に１００万ノード以上生成するソルバを実装。
ある程度自力で頑張った後、以下の論文を読む。
http://www.aaai.org/ocs/index.php/SOCS/SOCS12/paper/viewFile/5404/5682
---------------------------------
課題２
任意の数独パズルを解くソルバを実装しなさい。
入力ファイル： 以下のページの「test cases」にテキスト形式の問題集が置かれてます。
http://www2.warwick.ac.uk/fac/sci/moac/people/students/peter_cock/python/sudoku/
上のページには数独の解き方の解説も書かれてますが、
殆ど一般性が無いアドバイスなので（全てのパズルを解く保障が無い）、解き方の解説は無視しましょう。
正しい解き方はRusell&Norvigの教科書の制約充足の章に紹介されている手法です。
１）まず、深さ優先探索を用いたバックトラック法を実装
２）更に効率良く解く為に、制約伝播(constraint propagation)を実装する。
今回の課題の味噌は（２）です。
正しく実装すれば、「難しい」と言われているパズルもミリ秒単位以内で解けます
** 遠藤君が実装した制約伝播＋バックトラックを用いたPython ソルバ(PyPy JIT)は上記サイトのmsk_009問題集1,011門を全問解くのに要した時間が15秒。
---------------------------------
结论说明：https://blog.csdn.net/u013390476/article/details/50011261
代码来源：https://blog.csdn.net/V2beach/article/details/103485357
Back track、informed backtrack:
課題３
数独の課題でバックトラック＋制約伝播はかなり強力な手法だと実感したと思います。
では、ＢＴ＋制約伝播はどこまで通用するのか、違う問題を通じて確認しましょう。
ついでに、そろそろ本物の学術論文を読み始めましょう。
Russell&Norvig 5.3 (p.151)にN-Queens問題が紹介されてます。
このN-Queens問題に対して：
１）バックトラック法＋制約伝播を用いたソルバを実装する
入力： Queenの数N
２） 局所探索法（min-conflicts法)を用いたソルバを実装する。
制約充足における局所探索法は教科書（第２版）の制約充足の章で簡潔に説明されているが、
教科書の洗練された説明だけでなく、原文を読む（当時、かなり大きなインパクトがあった有名な論文で、ＡＩ分野の「名作」の一つ。
Solving Large-Scale Constraint Satisfaction and Scheduling Problems
Using a Heuristic Repair Method presented at the Eighth National
Conference on Artificial Intelligence (AAAI-90)
https://www.aaai.org/Papers/AAAI/1990/AAAI90-003.pdf
この論文で紹介されたアルゴリズムを実装する。
局所探索法のソルバを正しく、効率良く実装すれば、かなり大規模な問題が解けるはず。
３） 上記ソルバ１，２、を比較する
**遠藤君の結果（３・２６）
N=1,000,000の問題を128秒で解けた(python, pypy JIT on 1.06GHz Core 2 Duo, 2GB RAM)
---------------------------------
課題４
今度はN-Queens問題をboolean satisfiability (SAT)として表現し
て解くプログラムを作りましょう。
以下の資料(Chumin Li作)にNQueensSATモデルの概要が説明されている：
https://sites.google.com/site/aflabinternal/sharedfiles/Li-SAT-modeling-slides.pdf?attredirects=0&d=1
但し、SATソルバは自分で作らず、
ネットから高性能のソルバを拾って利用する。例えば、
http://minisat.se/   （他のソルバでも構わない）
minisatf等が処理可能な標準ファイル形式(.cnf 形式)の説明：
http://www.satcompetition.org/2009/format-benchmarks2009.html
要するに、Queenの数Nを入力として、
１）SATソルバが処理できる形式のファイルを作成、
（この変換作業が今回の課題の味噌）
２）SATソルバを実行、
３）結果を読み込み、正しい解か確認
minisatは基本的には制約伝播＋木探索なので局所探索には劣るが、汎用ＳＡＴソルバでどこまで解けるか実感する（前回作った、自作の制約伝播＋深さ優先探索ソルバと比較する）
---------------------------------
課題５：汎用なプランナと、問題に特化した探索アルゴリズムを比較する
課題＃1で実装した8パズルのソルバと、最新の汎用プランナFast Downwardを比較する
汎用プランナFast Downwardをダウンロードして、コンパイルする
http://www.fast-downward.org/HomePage
http://www.fast-downward.org/ObtainingAndRunningFastDownward
FastDownwardを実装するには、問題(ドメイン）の一般的なモデルファイルおよび具体的な問題のインスタンスファイルが必要
このサイトから8パズルのモデル・インスタンスファイルのペア３問：eight01.pddl, eight01x.pddl ,
eight02,eight02x, eight03,eight03xをダウンロード：
https://github.com/SoarGroup/Domains-Planning-Domain-Definition-Language/tree/master/pddl
(OLD link:   http://www.ida.liu.se/~TDDC65/ai/la/strips/  )
まず、eight01.pddl, eight01x.pddlをなるべく理解する。
PDDL形式を理解するには、まずはRussell&Norvigのプランニングの章（１１）を復習。
PDDL形式の入門的な説明 http://users.cecs.anu.edu.au/~patrik/pddlman/writing.html
課題１で作った8パズルソルバの為に、eight01.pddl, eight01x.pddl... eight3x.pddlに相当する
入力ファイルを作成する（自動的な変換でなく、手作業でＯＫ）。
8パズルソルバとFastDownwardの探索性能を比較する：
Fast Downwardの実行： http://www.fast-downward.org/PlannerUsage
---------------------------------
課題６： 進化計算
Black-box関数最適化contest
https://github.com/P-N-Suganthan/CEC2014
ここで紹介されているtechnical report (single parameter)のベンチマーク問題に対する進化アルゴリズムを実装する。
https://github.com/P-N-Suganthan/CEC2014/blob/master/Definitions%20of%20%20CEC2014%20benchmark%20suite%20Part%20A.pdf
J. J. Liang, B-Y. Qu, P. N. Suganthan, "Problem Definitions and Evaluation Criteria for the CEC 2014 Special Session and Competition on Single Objective Real-Parameter Numerical Optimization", Technical Report 201311, Computational Intelligence Laboratory, Zhengzhou University, Zhengzhou, China  and  Technical Report, Nanyang Technological University, Singapore, December 2013. (Single parameter-operator set based case)
まずは自分で考えて、何か実装する。
次に、SHADEを実装してみる。
http://metahack.org/CEC2013-SHADE.pdf
参考に：田邊のコード（C++版、Java版 Matlab/Octave版） Ryoji Tanabe's Homepage 